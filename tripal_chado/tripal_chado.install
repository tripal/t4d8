<?php
/**
 * @file
 * Contains functions used to install/uninstall tripal_chado.
 */

use \Drupal\Core\Database\Database;

/**
 * Implements hook_install().
 */
function tripal_chado_install($is_syncing) {
  tripal_chado_install_cloner();
}

/**
 * Implements hook_uninstall().
 */
function tripal_chado_uninstall() {
  tripal_chado_uninstall_cloner();
}

/**
 * Implementation of hook_schema().
 *
 * @ingroup tripal_chado
 */
function tripal_chado_schema() {
  $schema = [];

  $schema['chado_installations'] = tripal_chado_chado_installations_schema();
  $schema['tripal_custom_tables'] = tripal_chado_tripal_custom_tables_schema();

  // Add tables to integrate the independant Tripal Vocabularies to Chado terms.
  $schema['chado_tripalvocab'] = tripal_chado_chado_vocab();
  $schema['chado_tripalvocabspace'] = tripal_chado_chado_vocabidspace();
  $schema['chado_tripalterm'] = tripal_chado_chado_term();

  return $schema;
}

/**
 * Returns the Drupal Schema API array for the chado_installations table.
 */
function tripal_chado_chado_installations_schema() {
  return [
    'fields' => [
      'install_id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'schema_name' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'version' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'created' => [
        'type' => 'varchar',
        'length' => 255,
      ],
      'updated' => [
        'type' => 'varchar',
        'length' => 255,
      ],
    ],
    'indexes' => [
      'schema_name' => ['schema_name'],
    ],
    'primary key' => ['install_id'],
  ];
}

/**
 * Links Tripal Vocabularies to Chado cvs.
 */
function tripal_chado_chado_vocab() {
  return [
    'fields' => [
      'mapping_id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'schema_name' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'cv_id' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
      'tripalvocab_id' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
    ],
    'indexes' => [
      'chado' => ['schema_name', 'cv_id'],
      'tripal' => ['tripalvocab_id'],
    ],
    'primary key' => ['mapping_id'],
  ];
}

/**
 * Links Tripal Vocabulary IDSpaces to Chado dbs.
 */
function tripal_chado_chado_vocabidspace() {
  return [
    'fields' => [
      'mapping_id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'schema_name' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'db_id' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
      'tripalvocabspace_id' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
    ],
    'indexes' => [
      'chado' => ['schema_name', 'db_id'],
      'tripal' => ['tripalvocabspace_id'],
    ],
    'primary key' => ['mapping_id'],
  ];
}

/**
 * Links Tripal Vocabularies to Chado cvs.
 */
function tripal_chado_chado_term() {
  return [
    'fields' => [
      'mapping_id' => [
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ],
      'schema_name' => [
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ],
      'cvterm_id' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
      'tripalterm_id' => [
        'type' => 'int',
        'not null' => TRUE,
      ],
    ],
    'indexes' => [
      'chado' => ['schema_name', 'cvterm_id'],
      'tripal' => ['tripalterm_id'],
    ],
    'primary key' => ['mapping_id'],
  ];
}

/**
 * Describes the Tripal Custom Tables (tripal_custom_tables) table.
 * This keeps track of tables created by Tripal and stored in chado.
 */
function tripal_chado_tripal_custom_tables_schema() {
  return [
    'fields' => array(
      'table_id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE
      ),
      'table_name' => array(
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE
      ),
      'schema' => array(
        'type' => 'text',
        'not null' => TRUE
      ),
      'mview_id' => array(
        'type' => 'int',
        'not null' => FALSE
      )
    ),
    'indexes' => array(
      'table_id' => array('table_id'),
    ),
    'primary key' => array('table_id'),
    'foreign keys' => array(
      'tripal_mviews' => array(
        'table' => 'tripal_mviews',
        'columns' => array(
          'mview_id' => 'mview_id'
        ),
      ),
    ),
  ];
}

/**
 * Run an SQL file.
 *
 * @param string $sql_file
 *   Path to an SQL file.
 *
 * @return resource
 *   A query result resource on success or false on failure. 
 */
function tripal_chado_install_run_sql($sql_file) {
  // Get the default database.
  $logger = \Drupal::service('tripal.logger');
  $database = \Drupal::database();
  $db_info = $database->getConnectionOptions();
  $dsn = sprintf(
    'dbname=%s host=%s port=%s user=%s password=%s',
    $db_info['database'],
    $db_info['host'],
    $db_info['port'],
    $db_info['username'],
    $db_info['password']
  );

  // Open a PHP connection to the database
  // since Drupal restricts us to a single statement per exec.
  $pgconnection = pg_connect($dsn);
  if (!$pgconnection) {
    $logger->error(
      "Unable to connect to database using '$dsn' connection string.\n"
    );
    pg_close($pgconnection);
    throw new Exception('Failed to get a direct connection to the database.');
  }

  // Retrieve the SQL file.
  $sql = file_get_contents($sql_file);
  if (!$sql) {
    $logger->error(
      "Unable to read '$sql_file' file content.\n"
    );
    pg_close($pgconnection);
    throw new Exception("Failed to get '$sql_file' file content.");
  }
  $result = pg_query($pgconnection, $sql);
  pg_close($pgconnection);

  return $result;
}

/**
 * Adds schema cloning functionality.
 */
function tripal_chado_install_cloner() {
  $logger = \Drupal::service('tripal.logger');
  
  $sql_cloner_path =
    drupal_get_path('module', 'tripal_chado')
    . '/chado_schema/pg-clone-schema/clone_schema.sql'
  ;
  $result = tripal_chado_install_run_sql($sql_cloner_path);

  if (!$result) {
    $logger->error(t("Unable to install SQL cloner functions.\n") . pg_last_error());
    throw new Exception("Failed to install SQL cloner functions ($sql_cloner_path).\n" . pg_last_error());
  }
}

/**
 * Remove schema cloning functionality.
 */
function tripal_chado_uninstall_cloner() {
  $logger = \Drupal::service('tripal.logger');
  $sql_uninstall_cloner_path =
    drupal_get_path('module', 'tripal_chado')
    . '/chado_schema/pg-clone-schema/clone_schema_uninstall.sql'
  ;
  $result = tripal_chado_install_run_sql($sql_uninstall_cloner_path);

  if (!$result) {
    $logger->error(t("Unable to uninstall SQL cloner functions.\n") . pg_last_error());
    throw new Exception("Failed to uninstall SQL cloner functions ($sql_uninstall_cloner_path).\n" . pg_last_error());
  }
}

/**
 * Adds schema cloning functionality.
 */
function tripal_chado_update_9101() {
  try {
    tripal_chado_install_cloner();
  }
  catch (Exception $e) {
    // Rethrow exception as UpdateException.
    throw new Drupal\Core\Utility\UpdateException($e);
  }
}
